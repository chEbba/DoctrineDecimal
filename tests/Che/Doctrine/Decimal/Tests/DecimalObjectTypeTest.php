<?php
/*
 * Copyright (c)
 * Kirill chEbba Chebunin <iam@chebba.org>
 *
 * This source file is subject to the MIT license that is bundled
 * with this package in the file LICENSE.
 */

namespace Che\Doctrine\Decimal\Tests;

use Che\Doctrine\Decimal\DecimalObjectType;
use Che\Math\Decimal\Decimal;
use Doctrine\DBAL\Types\Type;
use PHPUnit_Framework_TestCase as TestCase;

/**
 * Description of DecimalObjectTypeTest
 *
 * @author Kirill chEbba Chebunin <iam@chebba.org>
 * @license http://opensource.org/licenses/mit-license.php MIT
 */
class DecimalObjectTypeTest extends TestCase
{
    /**
     * @var DecimalObjectType
     */
    private $type;
    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    private $platform;

    /**
     * {@inheritDoc}
     */
    public static function setUpBeforeClass()
    {
        Type::addType(DecimalObjectType::DECIMAL_OBJECT, 'Che\Doctrine\Decimal\DecimalObjectType');
    }

    /**
     * {@inheritDoc}
     */
    protected function setUp()
    {
        $this->type = Type::getType(DecimalObjectType::DECIMAL_OBJECT);
        $this->platform =
            $this->getMockBuilder('Doctrine\DBAL\Platforms\AbstractPlatform')
                ->setMethods(array('getDecimalTypeDeclarationSQL'))
                ->getMockForAbstractClass();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @test getSqlDeclaration return platform decimal
     */
    public function sqlDeclaration()
    {
        $fieldDeclaration = array('type' => DecimalObjectType::DECIMAL_OBJECT);
        $this->platform
            ->expects($this->once())
            ->method('getDecimalTypeDeclarationSQL')
            ->with($fieldDeclaration)
            ->will($this->returnValue('DECLARATION'));

        $declaration = $this->type->getSQLDeclaration($fieldDeclaration, $this->platform);

        $this->assertSame('DECLARATION', $declaration);
    }

    /**
     * @test convertToDatabaseValue returns decimal value
     */
    public function convertToDatabaseUsesValue()
    {
        $value = new Decimal('123.45');

        $converted = $this->type->convertToDatabaseValue($value, $this->platform);

        $this->assertSame($value->value(), $converted);
    }

    /**
     * @test convertToPHPDatabaseValue saves null
     */
    public function convertToDatabaseNull()
    {
        $converted = $this->type->convertToDatabaseValue(null, $this->platform);

        $this->assertNull($converted);
    }

    /**
     * @test convertToDatabaseValue throws exception on not decimal
     * @expectedException Doctrine\DBAL\DBALException
     */
    public function convertToDatabaseNotDecimal()
    {
        $this->type->convertToDatabaseValue('1234', $this->platform);
    }

    /**
     * @test convertToPHPValue creates big decimal with auto scale
     */
    public function convertToPHPCreatesDecimal()
    {
        $value = '123.4500';

        $converted = $this->type->convertToPHPValue($value, $this->platform);

        $this->assertInstanceOf('Che\Math\Decimal\Decimal', $converted);
        $this->assertSame($value, $converted->value());
    }

    /**
     * @test convertToPHPValue converts null to null
     */
    public function convertToPHPNull()
    {
        $converted = $this->type->convertToPHPValue(null, $this->platform);

        $this->assertNull($converted);
    }

    /**
     * @test convertPHPValue throws exception on wrong format
     * @expectedException Doctrine\DBAL\Types\ConversionException
     */
    public function convertToPHPWrongFormat()
    {
        $this->type->convertToPHPValue('absdas', $this->platform);
    }
}
